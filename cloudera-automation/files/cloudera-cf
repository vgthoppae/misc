AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudera Installation template
Parameters:
  TargetServers:
    Description: Servers to be created
    Default: all
    Type: String
    AllowedValues: 
      - cm
      - database
    ConstraintDescription: must specify one of the above.  
Conditions:
  CreateDBServer: !Equals [ !Ref TargetServers, database ]
  CreateAllServers: !Equals [ !Ref TargetServers, cm ]

Resources:
  ClouderaDatabaseEC2Instance:
    Type: "AWS::EC2::Instance"
    Condition: CreateDBServer
    Metadata:
      Comment1: Provides Info to cfn-init command 
      AWS::CloudFormation::Init:
        configSets:
          installConfig:
            - "install"
            - "init_mysql"
            - "cleanup"

        install:
          packages:
            rpm:
              epel: http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
            yum:
              wget: []
              mysql-community-server: []
              mysql-connector-java: []
          commands:
            start_mysqld:
              command: systemctl start mysqld

          files:
            /etc/my.cnf:
              content: |
                [mysqld]
                datadir=/var/lib/mysql
                socket=/var/lib/mysql/mysql.sock
                transaction-isolation = READ-COMMITTED
                # Disabling symbolic-links is recommended to prevent assorted security risks;
                # to do so, uncomment this line:
                symbolic-links = 0

                key_buffer_size = 32M
                max_allowed_packet = 32M
                thread_stack = 256K
                thread_cache_size = 64
                query_cache_limit = 8M
                query_cache_size = 64M
                query_cache_type = 1

                max_connections = 550
                #expire_logs_days = 10
                #max_binlog_size = 100M

                #log_bin should be on a disk with enough free space.
                #Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your
                #system and chown the specified folder to the mysql user.
                log_bin=/var/lib/mysql/mysql_binary_log

                #In later versions of MySQL, if you enable the binary log and do not set
                #a server_id, MySQL will not start. The server_id must be unique within
                #the replicating group.
                server_id=1

                binlog_format = mixed

                read_buffer_size = 2M
                read_rnd_buffer_size = 16M
                sort_buffer_size = 8M
                join_buffer_size = 8M

                # InnoDB settings
                innodb_file_per_table = 1
                innodb_flush_log_at_trx_commit  = 2
                innodb_log_buffer_size = 64M
                innodb_buffer_pool_size = 600M
                innodb_thread_concurrency = 8
                innodb_flush_method = O_DIRECT
                innodb_log_file_size = 512M

                [mysqld_safe]
                log-error=/var/log/mysqld.log
                pid-file=/var/run/mysqld/mysqld.pid

                sql_mode=STRICT_ALL_TABLES
            /tmp/dbinit:
               content: |
                 create database scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on scm.* to 'scm'@'%' identified by 'scm';

                 create database amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on amon.* to 'amon'@'%' identified by 'amon';

                 create database rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on rman.* to 'rman'@'%' identified by 'rman';

                 create database hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on hue.* to 'hue'@'%' identified by 'hue';

                 create database metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on hive.* to 'hive'@'%' identified by 'hive';

                 create database sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on sentry.* to 'sentry'@'%' identified by 'sentry';

                 create database nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on nav.* to 'nav'@'%' identified by 'nav';

                 create database navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on navms.* to 'navms'@'%' identified by 'navms';

                 create database oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                 grant all on oozie.* to 'oozie'@'%' identified by 'oozie';

                 UPDATE mysql.user SET Password=PASSWORD('VeryHard1') WHERE User='root';
                 DELETE FROM mysql.user WHERE User='';
                 DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
                 DROP DATABASE IF EXISTS test;
                 DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
                 Flush PRIVILEGES;
          services:
            mysqld:
              enabled: "true"
              ensureRunning: "true"
              packages:
                yum:
                  - mysql-community-server

        init_mysql:
          commands:
            mysql_init:
              command: mysql < /tmp/dbinit
            restart_mysql:
              command: systemctl start mysqld  

        cleanup:
          commands:
            delete_mysql_init:
              command: rm -f /tmp/dbinit
                          
    Properties: 
      ImageId: "ami-9887c6e7" #CentOS 7 (x86_64) - with Updates HVM
      InstanceType: t2.micro
      KeyName: sbabswebserver-ami-key
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: Cloudera-Database
        - Key: Application Id
          Value: Cloudera
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y --enablerepo=extras install epel-release
          yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
          yum update -y
          ln -s /usr/local/lib/python2.7/site-packages/cfnbootstrap /usr/lib/python2.7/site-packages/cfnbootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ClouderaDatabaseEC2Instance --configsets installConfig --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ClouderaDatabaseEC2Instance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M 

  ClouderaManagerEC2Instance: 
    Type: "AWS::EC2::Instance"
    Condition: CreateCMServer
    Metadata:
      Comment1: Provides info to cfn-init command
      AWS::CloudFormation::Init:
        configSets:
          installConfig:
            - "init_env"
            - "createCM"


        init_env:
          packages:
            yum:
              wget: []
              mysql-connector-java: []
          commands:
            add_cm_repo:
              command: wget https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo -P /etc/yum.repos.d
            import_gpg:
              command: rpm --import https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera

        createCM:
          packages:
            yum:
              oracle-j2sdk1.7: []
              cloudera-manager-daemons: []
              cloudera-manager-server: []

    Properties: 
      ImageId: "ami-9887c6e7" #CentOS 7 (x86_64) - with Updates HVM
      InstanceType: t2.micro
      KeyName: sbabswebserver-ami-key
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: Cloudera-Manager-Server
        - Key: Application Id
          Value: Cloudera
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y --enablerepo=extras install epel-release
          yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
          yum update -y
          ln -s /usr/local/lib/python2.7/site-packages/cfnbootstrap /usr/lib/python2.7/site-packages/cfnbootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ClouderaManagerEC2Instance --configsets installConfig --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ClouderaManagerEC2Instance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M          



        